# syscalls.py
# This is the definition of all the syscalls, followed by
# the code that generates:
# - syscall_user.h - the header with the user-side of the interface
# - syscall_kernel.h - the header with the kernel-side of the interface
# - syscall_dispatch.asm -  the syscall dispatch implementation

void='void'
char='char' # etc.

# The order is arbitrary, there can also be gaps between syscall numbers.
syscalls = {
    1: ('putch', void, (('ch', char),)),
    3: ('getch', char, ())
}

#-----------------------------------------------------------------------

admonition="This file is automatically generated from syscalls.py"

def c_header_guards(guard):
    global admonition
    return \
        "#ifndef {0}\n#define {0}\n// {1}\n\n".format(guard, admonition), \
        "#endif // {0}\n".format(guard)

def c_decl(s):
        args = ", ".join(["char _n"] + ["{p[1]} {p[0]}".format(p=p) for p in s[2]])
        return "{ret} _k_{name}({args})"\
               .format(name=s[0], ret=s[1], args=args)

#

with open('syscall_user.h', 'w') as f:
    guards = c_header_guards('SYSCALL_USER_H')
    f.write(guards[0])
    for id, s in syscalls.items():
        f.write("extern {decl}; // #{id}\n".format(decl=c_decl(s), id=id))
    f.write("\n")
    for n, v in syscalls.items():
        args=", ".join([p[0] for p in v[2]])
        n_args=", ".join(["{}".format(n)] + ["({0[0]})".format(p) for p in v[2]])
        f.write("#define {name}({args}) (_k_{name}({n_args}))\n"
                .format(name=v[0], args=args, n_args=n_args))
    f.write("\n")
    f.write(guards[1])

with open('syscall_kernel.h', 'w') as f:
    guards = c_header_guards('SYSCALL_KERNEL_H')
    f.write(guards[0])
    for id, s in syscalls.items():
        f.write("{decl}; // #{id}\n".format(decl=c_decl(s), id=id))
    f.write("\n")
    f.write(guards[1])    

with open('syscall_dispatch.asm', 'w') as f:
    not_impl = 'not_impl_'
    
    f.write("; {}\n".format(admonition))
    min_syscall = min(syscalls.keys())
    max_syscall = max(syscalls.keys())

    f.write("\n; Dispatch Table\n_syscall_table:\n")
    for k in range(min_syscall, max_syscall+1):
        v = syscalls.get(k, (not_impl,))
        f.write("\t.dw\t_k_{name:<15}; #{id}\n".format(name=v[0], id=k))

    f.write("\n; Dispatcher\n")
    f.write("_k_{name}:\n".format(name=not_impl))
    for v in syscalls.values():
        f.write("_k_{name}:\n".format(name=v[0]))

    f.write("""\t;
\tld  iy, #2
\tadd iy, sp
\tld  a, 0(iy)     ; _n
\tld  bc, #{min_end}
\tcp  b
\tjc  _k_{notimpl} ; min > _n
\tcp  c
\tjnc _k_{notimpl} ; end <= _n
\tld  hl, #_syscall_table\n
\t
\tadc h, #-
""")
    
